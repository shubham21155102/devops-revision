worker_processes  1;

events {
    worker_connections 1024; 
}

http {
    # Define rate limiting
    limit_req_zone $binary_remote_addr zone=one:10m rate=10r/m; 

    # Define upstreams for load balancing
    upstream backend {
        round_robin;
        server node-1.default.svc.cluster.local:3000;  # Use Kubernetes DNS for services
        server node-2.default.svc.cluster.local:3000;  # Use Kubernetes DNS for services
    }

    server {
        listen 80;

        # Root location
        location / {
            limit_req zone=one burst=5 nodelay;
            return 200 'Welcome to Nginx';
            add_header Content-Type text/plain;
        }

        # Test location
        location /test/ {
            limit_req zone=one burst=5 nodelay;

            # Uncomment below if you want GeoIP2-based routing logic
            # if ($geoip2_data_country_code = "IN") {
            #    proxy_pass http://node-1.default.svc.cluster.local:3000;  
            # }
            
            proxy_pass http://backend; 
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        # API location
        location /api/ {
            limit_req zone=one burst=5 nodelay;
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
    }
}